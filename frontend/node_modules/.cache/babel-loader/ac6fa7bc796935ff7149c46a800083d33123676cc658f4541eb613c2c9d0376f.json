{"ast":null,"code":"const isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^192\\.168\\.\\d{1,3}\\.\\d{1,3}$/));\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log('Content is cached for offline use.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && !contentType.includes('javascript')) {\n      const registration = navigator.serviceWorker.ready;\n      registration.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","includes","unregister","reload","message"],"sources":["/Users/ahmadrezayousefkhani/Documents/University/Full Time Position/applications/OWT/my-app/frontend/src/serviceWorker.js"],"sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^192\\.168\\.\\d{1,3}\\.\\d{1,3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && !contentType.includes('javascript'))\n      ) {\n        const registration = navigator.serviceWorker.ready;\n        registration.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}